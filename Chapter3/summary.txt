第三章: 操作符

无副作用的操作符作用于操作数生成一个新值.
有副作用的操作符会改变操作数自身的值.

操作符只能操作基本类型,除了= == !=以及String的+ +=
发送消息只能请求对象
操作符与发送消息可以有相同的结果.

优先级:先乘除后加减.一般用括号明确规定计算顺序.

赋值:必须有一个物理空间可以存储等号右边值,右值可以是常数,变量或者表达式.
基本类型的赋值是复制,如a=b;此后对任何一边修改不会影响另一边的值信息.这也是我们期望的.
对象赋值是引用的复制传递,而此后操作的都是同一个对象.这种现象也称别名问题.因为人们期望引用赋值两边都是独立的.
含引用参数的方法调用过程不是对象的复制,而只是一个引用的传递.在该方法作用域实际改变的是作用域之外的对象.

一元减号: x = -a; x = a * -b;
一元加号: 唯一的作用将较小的类型操作数提升为int;

自动递增和递减是除那些涉及赋值的操作符以外,唯一具有副作用的操作符.他们会改变操作数,而不仅仅是使用自己的值.

等于或不等于适用于所有的基本类型和引用类型,而其他比较符不适用于boolean类型.大于小于没有意义.

equals()默认行为是比较对象的引用而不是内容.

与或非操作只用于布尔值.

窄化转型解决赋值时超出范围.

布尔类型可以执行按位与(&),按位或(|),按位异或(^)操作,但不能按位非.也不可对其进行移位操作.

逻辑运算符操作数只能为boolean类型.
移位操作符只可以用来处理整数类型(char, byte, short, int, long),不能处理float,double以及boolean类型.
<<: 低位补零;
>>: 有符号右移,高位插入0(正数)或1(负数).
>>>: 无符号右移,高位一定插入0.

对byte,short,char移位前会转换成int类型,并且得到的结果也是int类型.

数字的二进制表示形式称为有符号的二进制补码.

操作符重载:字符串操作符+和+=,编译器会把双引号内的字符序列自动转换成字符串.

可以对数值进行类型转换,也可以对变量进行类型转换.
窄化转换操作:将能容纳更多信息的数据类型转换成无法容纳那么多信息的类型,可能面临信息丢失的危险.
而扩展转换新类型能容纳原来类型的信息,不会造成任何信息的丢失.

Java允许我们把任何基本类型数据转换成别的基本数据类型,布尔除外.
对于引用类型,对象可以在其所属类型的类族之间可以进行类型转换.

在将float和double转型为整型值时,总是对该数字执行截尾.
如果想得到舍入结果,使用java.lang.Math中的round()方法.

对基本类型数据执行算术运算或者按位运算,只要类型比int小(char, byte, short)在运算前都会转换为int.
表达式中最大的数据类型决定了表达式最终结果的数据类型.
如果一个float值与一个double值相乘结果就是double.一个int值和一个long值相加结果就是long.

Java中的基本数据类型所占字节数都被设计在语言中了,因此不需要sizeof.

对于char, byte, short,复合赋值运算并不需要类型转换.









