第6章 访问权限控制(隐藏具体实现)

将变动的事物与保持不变的事物区分开来.
Java访问权限修饰词,以供类库开发人员向客户端程序员指明哪些是可用的,哪些是不可用的.

我们之所以要导入import,就要提供一个管理名字空间的机制.
所有类成员的名称都是彼此隔离的,即成员被类所分隔.

每一个编译单元(.java文件)只能有一个public类,否则编译器就不会接受.
如果在编译单元之中还有额外的类的话,那么在包之外的世界是无法看见这些类的,因为他们不是public,而且它们主要为public类提供支持.

java可运行程序是一组可以打包并压缩为一个jar包的.class文件.

如果希望这些构件(每一个都有它们自己的独立的.java和.class文件)从属于同一个群组,就可以使用关键字package.
在根据java文件生成相应的class文件时会按照package来生成文件夹.
这个class必须位于其包名称所指定的目录之中,而该目录必须是以CLASSPATH开始的目录可以查询到的.
所以当java程序运行并且需要加载.class文件的时候,他就可以确定.class文件在目录上所处的位置(将每个句点替换为斜杠).

package和import关键字,将单一的全局名字空间分隔开.不会出现类名冲突的问题.

类路径可以无穷多,但是包路径必须独一无二不能冲突.
CLASSPATH=.;D:\JAVA\LIB;C:\flavors\grape.jar

由于Java自身可以自动跨越不同的平台,因此条件编译功能对Java而言没有必要.
用import改变行为,即类名都相同,仅仅包名不同.变更包名就可以改变代码.

将一个类私有化,指的时私有化其所有的构造方法,而不是class前的修饰符,事实上也不允许.

任何可以肯定只是该类的一个助手方法都可以把它指定为private.

把数据和方法包装在类中,以及具体实现的隐藏,常共同被称作封装,其结果是一个同时带有特征和行为的数据类型.

将接口和实现进行分离.

public类的名称必须完全与含有该编译单元的文件名相匹配,包括大小写.

将关键字public从class前面去掉,这个类就拥有了包访问权限.可以确保客户端程序员不会依赖于想要隐藏的任何特定的实现细节.

私有化构造器后,可以将构造器转移成普通的public方法

访问权限控制专注于类库创建者和该类库的外部使用者之间的关系,这种关系也是一种通信方式.



