第五章 初始化与清理

初始化和清理正是涉及安全的两个问题.
在使用程序库时,需要知道如何初始化库的构件,而忘记清理会导致内存用尽.

构造器确保在你能操作对象之前,它已经被恰当的初始化了.构造器名称与类名完全相同.而类,方法,域,变量名称是区分大小写的.
在Java中初始化与创建捆绑在一起,两者不能分离.

new表达式确实返回了对新建对象的引用,但构造器本身并没有任何返回值.

方法重载是构造器所必需的,因为构造器名称与类名相同.

方法具有相同的参数,仅仅顺序不同,得以区分,可以视为重载,但会使得代码难以维护.

同名的仅仅基本类型不同的方法是构成重载的,虽然这些基本类型可以自动扩展转型.
基本类型重载遵循就近原则,即所匹配的重载方法一定是距离实参类型扩展转型最近的类型.

基本类型的重载原则:实参类型可以是承载信息小的类型,但是形参类型的能够比实参类型承载信息更大就会构成重载.
反之则不能,比如实参为一个double类型的数据传入给形参最大只接收float类型的方法,是传入不进去的.
方法接受较小的基本类型作为参数,如果传入实际参数较大,就得通过类型转换来执行窄化转换.

调用一个含有返回值的方法但是忽略其返回值,这称为为了副作用而调用.所以根据方法的返回值来区分重载方法是行不通的.

已经定义了一个构造器,无论是否有参数,编译器都不会帮你自动创建默认构造器.
编译器会认为:"啊,你已写了一个构造器,所以你知道你在做什么,你是可能刻意省略了默认构造器的".

a.peel(1); b.peel(2);发送消息给对象.
单从方法来看,编译器会暗自把所操作对象的引用作为第一个参数传递给peel.
this关键字只能在方法内部使用,表示对"调用方法的那个对象"的引用.
但注意的是一般情况下没有重名现象或者返回this时,可以精确定位时,则直接省略即可.

this时属于当前调用者的对象,对象都有自己独立的域.而方法却是各个对象共用的.

外部工具方法又称静态方法,是没有隐含this传入的,因此需要显示传参.传入this即可.
在static方法中不能调用非静态方法,除非手动传入this或者在内部创建自身对象拿到引用.
而反过来是可以的,非静态方法可以调用静态方法,甚至在创建对象之前也可以通过类名调用静态方法.

this可以调用一个构造器,但却不能调用两次,此外,必须将构造器调用置于起始处.
当使用this调用其他构造器时,本构造器中的默认super构造器会被屏蔽掉.因为super和this不能同时存在.

对象(不是通过new)获得了一块特殊的内存区域,Java只能在该类中定义一个finalize()的方法.在下一次垃圾回收动作发生之前会被调用.
但是,对象可能不被垃圾回收.JVM并未面临内存耗尽的情形,它是不会浪费时间去执行垃圾回收以恢复内存的.
这意味着在你不需要某个对象之前,如果必须执行某些动作,那么你得自己去创建一个执行清理工作的普通方法.

垃圾回收只与内存有关,与清理无关.请勿使用终结函数finalize()来作清理.

Java从堆分配空间的速度,可以和其他语言从栈上分配空间的速度相媲美.
JVM堆的实现像一个传送带,每分配一个对象就往前移动一格,Java的堆指针只是简单的移动到尚未分配的区域,这意味着速度快.

当JVM工作时一面回收空间,一面使堆中的对象紧凑排列.

引用计数常用来说明垃圾收集的工作方式,当引用计数为0则会释放该对象.由于循环引用,自己引用到了自己,所以不用.

对任何"活"对象,一定能最终追溯到其存活在栈中或静态存储区中的引用,在其中遍历所有引用,就能找到所有"活"对象.
JVM采用一种自适应的垃圾回收技术.

停止-复制(stop and copy) 先暂停程序的运行,所以不属于后台回收模式.
将所有存活对象从当前堆复制到另一个堆.没有复制的全部被当作垃圾.而新堆中是一个挨着一个的.紧凑排列的.
最终需要修正原引用的地址.
这种复制式回收器效率低.适用于产生很多垃圾.

标记-清扫(mark-and-sweep) 也必须暂停程序运行.
每找到一个对象打一个标记,全部标记工作完成后,开始清理.没有标记的对象会被释放,不会发生任何复制动作.

默认值都属于无效值.

对象的域之间都是平行关系,但仅仅在域初始化时有初始化顺序:从上而下一条一条初始化的,变量定义的先后顺序决定了初始化的顺序.需要避免向前引用.
向前引用:在初始化一个域时使用了下面还未初始化的域.

初始化流程: 默认初始化 --> 指定初始化 --> 构造器初始化.

只有在第一个对象被创建或者第一次访问静态数据(类型调用)的时候,静态数据才会被初始化,此后静态域不会再次被初始化.

初始化的顺序是,先静态,后非静态.

对象的创建过程:
构造器实际上也是静态方法.当静态方法/静态域首次被访问的时候,java解释器必须查找类的路径,以定位Dog.class文件.
载入Dog.class,有关静态初始化的全部动作都会执行.静态初始化只在Class对象首次加载的时候被创建一次.
当用new Dog()创建对象的时候,首先将在堆上为Dog分配足够的存储空间,这块存储空间会被清零(即默认初始化).
执行所有指定初始化(字段定义处的初始化).
实例初始化块.
执行构造器初始化.

静态初始化块static{}与实例初始化块{},二者均在指定初始化之后,构造器初始化之前执行.初始化块内可以写语句.
静态初始化块只执行一次,在创建Class对象后执行.

这种实例初始化块是用于支持匿名内部类初始化所必须的.

foreach循环对Iterater对象元素只读不写,要想对数组对象元素更改,请用for循环使用下标对元素直接引用.

数组初始化有三种方式.
int[] a = new int[0];
int[] a = new int[]{};
int[] a = {}; //仅仅使用在定义处. 错误用法: a = {}.
初始化列表最后一个逗号都是可选的.

有了可变参数,再也不用显示的编写数组语法了,当你指定参数时,编译器实际上会为你填充数组.你获取的仍是一个数组.
如果实参已经是一个数组了,且类型相同,就不会在其上执行任何转换了.
也就是说,可变参数列表不仅可以接收参数列表,还可以接收数组.甚至可以接收0个参数.

可变参数不依赖自动包装机制,编译器既可以生成引用数组也可以直接生成基本类型数组.

重载方法蔟中只有一个是可变参数列表,否则极易重复.或者说不要在重载方法中使用可变参数列表.







